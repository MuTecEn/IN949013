# -*- coding: utf-8 -*-
"""RAVEv2_Training.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ih-gv1iHEZNuGhHPvCHrleLNXvooQMvI
"""

#@title README
!yes | pip install --quiet pyfiglet

import pyfiglet

resulta = pyfiglet.figlet_format(f"RAVE", font = "isometric1", )
resultb = pyfiglet.figlet_format(f"v2", font = "isometric2", )
print(resulta)
# print(resultb)
print("\n")
print("\n")
print("RAVE: Realtime Audio Variational autoEncoder | Authors: Antoine Caillon, Acids-IRCAM | https://github.com/acids-ircam/RAVE | https://arxiv.org/abs/2111.05011")
print("Custom collab implementation by Mois√©s Horta | http://twitter.com/hexorcismos | http://github.com/moiseshorta")
print("\n")
print("Last Modified: 19.06.2023")

#@title Install Conda, RAVE and ffmpeg


!curl -L https://repo.anaconda.com/miniconda/Miniconda3-py39_4.12.0-Linux-x86_64.sh -o miniconda.sh
!chmod +x miniconda.sh
!sh miniconda.sh -b -p /content/miniconda
!/content/miniconda/bin/pip install --quiet acids-rave
!/content/miniconda/bin/pip install --quiet --upgrade ipython ipykernel
!/content/miniconda/bin/conda install ffmpeg

# Commented out IPython magic to ensure Python compatibility.
#@title Tensorboard for monitoring training

logs_path = "/path/to/rave/folder"#@param {type:"string"}

# %cd $logs_path
# %load_ext tensorboard
# %tensorboard --logdir . --bind_all

# Commented out IPython magic to ensure Python compatibility.
#@title Training
dataset = "/path/to/audio/dataset" #@param {type:"string"}
name = "name_of_run" #@param {type:"string"}
save_dir = "/path/to/save/checkpoints" #@param {type:"string"}
architecture = "v2" #@param ["v3", "v2", "v1", "discrete", "onnx", "raspberry" ]
regularization = "wasserstein" #@param ["default", "wasserstein", "spherical"]


# %cd /content/
!mkdir dataset
# %cd $save_dir
preprocessed_dataset = "/content/dataset"

# !/content/miniconda/bin/rave train --helpfull
if regularization == "default":
  !/content/miniconda/bin/rave preprocess --input_path $dataset --output_path $preprocessed_dataset
  !/content/miniconda/bin/rave train --config $architecture --db_path $preprocessed_dataset --name $name --val_every 2500
else:
  !/content/miniconda/bin/rave preprocess --input_path $dataset --output_path $preprocessed_dataset
  !/content/miniconda/bin/rave train --config $architecture --config $regularization --db_path $preprocessed_dataset --name $name --val_every 2500

# Commented out IPython magic to ensure Python compatibility.
#@title Resume Training

#@title Training
dataset = "/path/to/audio/dataset" #@param {type:"string"}
name = "run_name" #@param {type:"string"}
save_dir = "/path/to/save/checkpoints" #@param {type:"string"}
architecture = "v2" #@param ["v3", "v2", "v1", "discrete", "onnx", "raspberry" ]
regularization = "wasserstein" #@param ["default", "wasserstein", "spherical"]
resume = "/path/to/rave/checkpoint.ckpt" #@param {type:"string"}


# %cd /content/
!mkdir dataset
# %cd $save_dir
preprocessed_dataset = "/content/dataset"

# !/content/miniconda/bin/rave train --helpfull
if regularization == "default":
  !/content/miniconda/bin/rave preprocess --input_path $dataset --output_path $preprocessed_dataset
  !/content/miniconda/bin/rave train --config $architecture --db_path $preprocessed_dataset --name $name --ckpt $resume --val_every 2500
else:
  !/content/miniconda/bin/rave preprocess --input_path $dataset --output_path $preprocessed_dataset
  !/content/miniconda/bin/rave train --config $architecture --config $regularization--db_path $preprocessed_dataset --name $name --ckpt $resume --val_every 2500

#@title Export as torchscript (.ts)

model_dir = "/path/to/trained/rave/run" #@param {type:"string"}


!/content/miniconda/bin/rave export --run $model_dir --streaming --stereo --fidelity 0.999